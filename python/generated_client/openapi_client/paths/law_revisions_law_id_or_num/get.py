# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from openapi_client.model.error_info import ErrorInfo
from openapi_client.model.mission import Mission
from openapi_client.model.category_cd import CategoryCd
from openapi_client.model.amendment_type import AmendmentType
from openapi_client.model.response_format import ResponseFormat
from openapi_client.model.current_revision_status import CurrentRevisionStatus
from openapi_client.model.repeal_status import RepealStatus
from openapi_client.model.law_revisions_response import LawRevisionsResponse

from . import path

# Query params
LawTitleSchema = schemas.StrSchema
LawTitleKanaSchema = schemas.StrSchema
AmendmentDateFromSchema = schemas.DateSchema
AmendmentDateToSchema = schemas.DateSchema
AmendmentLawIdSchema = schemas.StrSchema
AmendmentLawNumSchema = schemas.StrSchema
AmendmentLawTitleSchema = schemas.StrSchema
AmendmentLawTitleKanaSchema = schemas.StrSchema
AmendmentPromulgateDateFromSchema = schemas.DateSchema
AmendmentPromulgateDateToSchema = schemas.DateSchema


class AmendmentTypeSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        @staticmethod
        def items() -> typing.Type['AmendmentType']:
            return AmendmentType

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple['AmendmentType'], typing.List['AmendmentType']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AmendmentTypeSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'AmendmentType':
        return super().__getitem__(i)


class CategoryCdSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        @staticmethod
        def items() -> typing.Type['CategoryCd']:
            return CategoryCd

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple['CategoryCd'], typing.List['CategoryCd']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CategoryCdSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'CategoryCd':
        return super().__getitem__(i)


class CurrentRevisionStatusSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        @staticmethod
        def items() -> typing.Type['CurrentRevisionStatus']:
            return CurrentRevisionStatus

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple['CurrentRevisionStatus'], typing.List['CurrentRevisionStatus']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CurrentRevisionStatusSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'CurrentRevisionStatus':
        return super().__getitem__(i)


class MissionSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        @staticmethod
        def items() -> typing.Type['Mission']:
            return Mission

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple['Mission'], typing.List['Mission']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MissionSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'Mission':
        return super().__getitem__(i)
RemainInForceSchema = schemas.BoolSchema
RepealDateFromSchema = schemas.DateSchema
RepealDateToSchema = schemas.DateSchema


class RepealStatusSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        @staticmethod
        def items() -> typing.Type['RepealStatus']:
            return RepealStatus

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple['RepealStatus'], typing.List['RepealStatus']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'RepealStatusSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'RepealStatus':
        return super().__getitem__(i)
UpdatedFromSchema = schemas.DateSchema
UpdatedToSchema = schemas.DateSchema


class ResponseFormatSchema(
    schemas.ComposedSchema,
):


    class MetaOapg:
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                ResponseFormat,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ResponseFormatSchema':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'law_title': typing.Union[LawTitleSchema, str, ],
        'law_title_kana': typing.Union[LawTitleKanaSchema, str, ],
        'amendment_date_from': typing.Union[AmendmentDateFromSchema, str, date, ],
        'amendment_date_to': typing.Union[AmendmentDateToSchema, str, date, ],
        'amendment_law_id': typing.Union[AmendmentLawIdSchema, str, ],
        'amendment_law_num': typing.Union[AmendmentLawNumSchema, str, ],
        'amendment_law_title': typing.Union[AmendmentLawTitleSchema, str, ],
        'amendment_law_title_kana': typing.Union[AmendmentLawTitleKanaSchema, str, ],
        'amendment_promulgate_date_from': typing.Union[AmendmentPromulgateDateFromSchema, str, date, ],
        'amendment_promulgate_date_to': typing.Union[AmendmentPromulgateDateToSchema, str, date, ],
        'amendment_type': typing.Union[AmendmentTypeSchema, list, tuple, ],
        'category_cd': typing.Union[CategoryCdSchema, list, tuple, ],
        'current_revision_status': typing.Union[CurrentRevisionStatusSchema, list, tuple, ],
        'mission': typing.Union[MissionSchema, list, tuple, ],
        'remain_in_force': typing.Union[RemainInForceSchema, bool, ],
        'repeal_date_from': typing.Union[RepealDateFromSchema, str, date, ],
        'repeal_date_to': typing.Union[RepealDateToSchema, str, date, ],
        'repeal_status': typing.Union[RepealStatusSchema, list, tuple, ],
        'updated_from': typing.Union[UpdatedFromSchema, str, date, ],
        'updated_to': typing.Union[UpdatedToSchema, str, date, ],
        'response_format': typing.Union[ResponseFormatSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_law_title = api_client.QueryParameter(
    name="law_title",
    style=api_client.ParameterStyle.FORM,
    schema=LawTitleSchema,
    explode=True,
)
request_query_law_title_kana = api_client.QueryParameter(
    name="law_title_kana",
    style=api_client.ParameterStyle.FORM,
    schema=LawTitleKanaSchema,
    explode=True,
)
request_query_amendment_date_from = api_client.QueryParameter(
    name="amendment_date_from",
    style=api_client.ParameterStyle.FORM,
    schema=AmendmentDateFromSchema,
    explode=True,
)
request_query_amendment_date_to = api_client.QueryParameter(
    name="amendment_date_to",
    style=api_client.ParameterStyle.FORM,
    schema=AmendmentDateToSchema,
    explode=True,
)
request_query_amendment_law_id = api_client.QueryParameter(
    name="amendment_law_id",
    style=api_client.ParameterStyle.FORM,
    schema=AmendmentLawIdSchema,
    explode=True,
)
request_query_amendment_law_num = api_client.QueryParameter(
    name="amendment_law_num",
    style=api_client.ParameterStyle.FORM,
    schema=AmendmentLawNumSchema,
    explode=True,
)
request_query_amendment_law_title = api_client.QueryParameter(
    name="amendment_law_title",
    style=api_client.ParameterStyle.FORM,
    schema=AmendmentLawTitleSchema,
    explode=True,
)
request_query_amendment_law_title_kana = api_client.QueryParameter(
    name="amendment_law_title_kana",
    style=api_client.ParameterStyle.FORM,
    schema=AmendmentLawTitleKanaSchema,
    explode=True,
)
request_query_amendment_promulgate_date_from = api_client.QueryParameter(
    name="amendment_promulgate_date_from",
    style=api_client.ParameterStyle.FORM,
    schema=AmendmentPromulgateDateFromSchema,
    explode=True,
)
request_query_amendment_promulgate_date_to = api_client.QueryParameter(
    name="amendment_promulgate_date_to",
    style=api_client.ParameterStyle.FORM,
    schema=AmendmentPromulgateDateToSchema,
    explode=True,
)
request_query_amendment_type = api_client.QueryParameter(
    name="amendment_type",
    style=api_client.ParameterStyle.FORM,
    schema=AmendmentTypeSchema,
)
request_query_category_cd = api_client.QueryParameter(
    name="category_cd",
    style=api_client.ParameterStyle.FORM,
    schema=CategoryCdSchema,
)
request_query_current_revision_status = api_client.QueryParameter(
    name="current_revision_status",
    style=api_client.ParameterStyle.FORM,
    schema=CurrentRevisionStatusSchema,
)
request_query_mission = api_client.QueryParameter(
    name="mission",
    style=api_client.ParameterStyle.FORM,
    schema=MissionSchema,
)
request_query_remain_in_force = api_client.QueryParameter(
    name="remain_in_force",
    style=api_client.ParameterStyle.FORM,
    schema=RemainInForceSchema,
    explode=True,
)
request_query_repeal_date_from = api_client.QueryParameter(
    name="repeal_date_from",
    style=api_client.ParameterStyle.FORM,
    schema=RepealDateFromSchema,
    explode=True,
)
request_query_repeal_date_to = api_client.QueryParameter(
    name="repeal_date_to",
    style=api_client.ParameterStyle.FORM,
    schema=RepealDateToSchema,
    explode=True,
)
request_query_repeal_status = api_client.QueryParameter(
    name="repeal_status",
    style=api_client.ParameterStyle.FORM,
    schema=RepealStatusSchema,
)
request_query_updated_from = api_client.QueryParameter(
    name="updated_from",
    style=api_client.ParameterStyle.FORM,
    schema=UpdatedFromSchema,
    explode=True,
)
request_query_updated_to = api_client.QueryParameter(
    name="updated_to",
    style=api_client.ParameterStyle.FORM,
    schema=UpdatedToSchema,
    explode=True,
)
request_query_response_format = api_client.QueryParameter(
    name="response_format",
    style=api_client.ParameterStyle.FORM,
    schema=ResponseFormatSchema,
    explode=True,
)
# Path params
LawIdOrNumSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'law_id_or_num': typing.Union[LawIdOrNumSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_law_id_or_num = api_client.PathParameter(
    name="law_id_or_num",
    style=api_client.ParameterStyle.SIMPLE,
    schema=LawIdOrNumSchema,
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = LawRevisionsResponse
SchemaFor200ResponseBodyApplicationXml = LawRevisionsResponse


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
        SchemaFor200ResponseBodyApplicationXml,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'application/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationXml),
    },
)
SchemaFor400ResponseBodyApplicationJson = ErrorInfo
SchemaFor400ResponseBodyApplicationXml = ErrorInfo


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBodyApplicationJson,
        SchemaFor400ResponseBodyApplicationXml,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
        'application/xml': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationXml),
    },
)
SchemaFor500ResponseBodyApplicationJson = ErrorInfo
SchemaFor500ResponseBodyApplicationXml = ErrorInfo


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor500ResponseBodyApplicationJson,
        SchemaFor500ResponseBodyApplicationXml,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
        'application/xml': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationXml),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
    'application/xml',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _get_revisions_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _get_revisions_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _get_revisions_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _get_revisions_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        法令履歴一覧取得API
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_law_id_or_num,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        prefix_separator_iterator = None
        for parameter in (
            request_query_law_title,
            request_query_law_title_kana,
            request_query_amendment_date_from,
            request_query_amendment_date_to,
            request_query_amendment_law_id,
            request_query_amendment_law_num,
            request_query_amendment_law_title,
            request_query_amendment_law_title_kana,
            request_query_amendment_promulgate_date_from,
            request_query_amendment_promulgate_date_to,
            request_query_amendment_type,
            request_query_category_cd,
            request_query_current_revision_status,
            request_query_mission,
            request_query_remain_in_force,
            request_query_repeal_date_from,
            request_query_repeal_date_to,
            request_query_repeal_status,
            request_query_updated_from,
            request_query_updated_to,
            request_query_response_format,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class GetRevisions(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def get_revisions(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get_revisions(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get_revisions(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get_revisions(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_revisions_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_revisions_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


