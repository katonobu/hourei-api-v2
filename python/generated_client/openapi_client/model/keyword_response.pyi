# coding: utf-8

"""
    法令API Version 2

    ## はじめに > * 本APIは<a href=\"https://laws.e-gov.go.jp/apitop/\" target=\"_blank\">法令API（Version1）</a>を改良開発したHTTP APIです。<br> > * 仕様変更情報やサーバーメンテナンス情報につきましては、<a href=\"https://laws.e-gov.go.jp/\" target=\"_blank\">e-Gov法令検索</a>をご覧ください。<br> > * 取得可能な法令データの範囲は、<a href=\"https://laws.e-gov.go.jp/help/#:~:text=%E8%AA%AD%E3%81%BF%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84-,e%2DGov%E6%B3%95%E4%BB%A4%E6%A4%9C%E7%B4%A2%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6,-%E5%B9%B3%E6%88%9029%E5%B9%B4\" target=\"_blank\">e-Gov法令検索について</a>をご覧ください。 > * 法令構造や法令XMLの理解を深めたい方は、<a href=\"https://laws.e-gov.go.jp/docs/\"  target=\"_blank\">法令ドキュメンテーションα版</a>をご覧ください。<br> > * 本ページを視覚的にわかりやすく表現した<a href=\"https://laws.e-gov.go.jp/api/2/redoc/\"  target=\"_blank\">Redoc</a>も提供しておりますのでご覧ください。<br>   ## 注意事項 > <font color=\"red\">&nbsp;&nbsp;本APIが提供している機能のうち、以下は試行版となり仕様変更が発生する場合がありますのでご了承ください。</font><br> > <font color=\"red\">&nbsp;&nbsp;&nbsp;&nbsp;- 法令本文取得APIで返却されるJSON形式のデータ<br></font> > <font color=\"red\">&nbsp;&nbsp;&nbsp;&nbsp;- 法令本文ファイル取得APIで取得できるJSON形式のデータ<br></font> > <font color=\"red\">&nbsp;&nbsp;&nbsp;&nbsp;- キーワード検索APIで名称に`law_num`を含むパラメータ指定時のレスポンスデータ<br></font>   ## XML一括ダウンロードについて > &nbsp;&nbsp;本APIはe-Gov法令検索で公開されているデータを使用します。<br> > &nbsp;&nbsp;法令データをダウンロードする場合は、<a href=\"https://laws.e-gov.go.jp/bulkdownload/\" target=\"_blank\">XML一括ダウンロード</a>にアクセスするか、以下のURLを利用してダウンロードしてください。<br>   >> * ### すべての法令データ >>> <pre><code>     https://laws.e-gov.go.jp/bulkdownload?file_section=1&only_xml_flag=true   </code></pre>   >> * ### 法令分類データ >>> <pre><code>     https://laws.e-gov.go.jp/bulkdownload?file_section=2&category_cd={カテゴリーコード}&only_xml_flag=true   </code></pre>   >>> ※ {カテゴリーコード}はSchemasの<a href=\"#model-category_cd\">`category_cd`</a>を参照してください。<br> >>> ※ `category_cd`の2桁目、3桁目の0は除いてください。（例えば、憲法は`001`ではなく`1`を使用します）   >> * ### 最新の更新法令データ >>> <pre><code>     https://laws.e-gov.go.jp/bulkdownload?file_section=3&update_date={取得する法令データの日付}&only_xml_flag=true   </code></pre>     >>> ※ {取得する法令データの日付}は「YYYYMMDD」（YYYY:年、MM:月、DD:日）形式で指定してください。<br>   >>> 例： 2024年1月1日の場合は`20240101`<br>   >>> （更新法令データの取得範囲は過去３ヶ月です。）   ## 改正区分について > &nbsp;&nbsp;法令APIでは、法令一覧取得API、法令履歴一覧取得API、法令本文取得API、キーワード検索APIのレスポンス`revision_info`内の要素で以下のように判断できます。<br>   >> <table bgcolor=\"white\" border=\"1\">     <tr bgcolor=\"#DDFFFF\">         <th width=\"5%\">改正区分</th>         <th width=\"25%\">改正区分の見分け方</th>     </tr>     <tr>         <td>　新規制定 </td>         <td>　amendment_typeが「1」 かつ missionが「New」のもの</td>     </tr>     <tr>         <td>　一部改正 </td>         <td>　missionが「Partial」のもの</td>     </tr>     <tr>         <td>　被改正法 </td>         <td>　amendment_typeが「3」 かつ missionが「New」のもの</td>     </tr>     <tr>         <td>　廃止 </td>         <td>　amendment_typeが「8」 又は repeal_statusが「Repeal」「Expire」「LossOfEffectiveness」のもの</td>     </tr>   </table>   # noqa: E501

    The version of the OpenAPI document: 2.1.138
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class KeywordResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    キーワード検索APIレスポンス
    """


    class MetaOapg:
        required = {
            "count",
        }
        
        class properties:
            total_count = schemas.Int64Schema
            sentence_count = schemas.Int64Schema
            
            
            class next_offset(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'next_offset':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                            
                                @staticmethod
                                def law_info() -> typing.Type['LawInfo']:
                                    return LawInfo
                            
                                @staticmethod
                                def revision_info() -> typing.Type['RevisionInfo']:
                                    return RevisionInfo
                                
                                
                                class sentences(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    
                                                    
                                                    class position(
                                                        schemas.ComposedSchema,
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            all_of_0 = schemas.StrSchema
                                                            
                                                            @classmethod
                                                            @functools.lru_cache()
                                                            def all_of(cls):
                                                                # we need this here to make our import statements work
                                                                # we must store _composed_schemas in here so the code is only run
                                                                # when we invoke this method. If we kept this at the class
                                                                # level we would get an error because the class level
                                                                # code would be run when this module is imported, and these composed
                                                                # classes don't exist yet because their module has not finished
                                                                # loading
                                                                return [
                                                                    cls.all_of_0,
                                                                ]
                                                    
                                                    
                                                        def __new__(
                                                            cls,
                                                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'position':
                                                            return super().__new__(
                                                                cls,
                                                                *_args,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                                    text = schemas.StrSchema
                                                    __annotations__ = {
                                                        "position": position,
                                                        "text": text,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["position", "text", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> typing.Union[MetaOapg.properties.position, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["position", "text", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                position: typing.Union[MetaOapg.properties.position, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                                text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    position=position,
                                                    text=text,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'sentences':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "law_info": law_info,
                                    "revision_info": revision_info,
                                    "sentences": sentences,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["law_info"]) -> 'LawInfo': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["revision_info"]) -> 'RevisionInfo': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sentences"]) -> MetaOapg.properties.sentences: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["law_info", "revision_info", "sentences", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["law_info"]) -> typing.Union['LawInfo', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["revision_info"]) -> typing.Union['RevisionInfo', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sentences"]) -> typing.Union[MetaOapg.properties.sentences, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["law_info", "revision_info", "sentences", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            law_info: typing.Union['LawInfo', schemas.Unset] = schemas.unset,
                            revision_info: typing.Union['RevisionInfo', schemas.Unset] = schemas.unset,
                            sentences: typing.Union[MetaOapg.properties.sentences, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                law_info=law_info,
                                revision_info=revision_info,
                                sentences=sentences,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "total_count": total_count,
                "sentence_count": sentence_count,
                "next_offset": next_offset,
                "items": items,
            }
    
    count: schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_count"]) -> MetaOapg.properties.total_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sentence_count"]) -> MetaOapg.properties.sentence_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next_offset"]) -> MetaOapg.properties.next_offset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["total_count", "sentence_count", "next_offset", "items", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_count"]) -> typing.Union[MetaOapg.properties.total_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sentence_count"]) -> typing.Union[MetaOapg.properties.sentence_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next_offset"]) -> typing.Union[MetaOapg.properties.next_offset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union[MetaOapg.properties.items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total_count", "sentence_count", "next_offset", "items", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        total_count: typing.Union[MetaOapg.properties.total_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sentence_count: typing.Union[MetaOapg.properties.sentence_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        next_offset: typing.Union[MetaOapg.properties.next_offset, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        items: typing.Union[MetaOapg.properties.items, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'KeywordResponse':
        return super().__new__(
            cls,
            *_args,
            total_count=total_count,
            sentence_count=sentence_count,
            next_offset=next_offset,
            items=items,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.law_info import LawInfo
from openapi_client.model.revision_info import RevisionInfo
